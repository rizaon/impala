# TPCDS-Q66
select
         w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
        ,ship_carriers
        ,year
 	,sum(jan_sales) as jan_sales
 	,sum(feb_sales) as feb_sales
 	,sum(mar_sales) as mar_sales
 	,sum(apr_sales) as apr_sales
 	,sum(may_sales) as may_sales
 	,sum(jun_sales) as jun_sales
 	,sum(jul_sales) as jul_sales
 	,sum(aug_sales) as aug_sales
 	,sum(sep_sales) as sep_sales
 	,sum(oct_sales) as oct_sales
 	,sum(nov_sales) as nov_sales
 	,sum(dec_sales) as dec_sales
 	,sum(jan_sales/w_warehouse_sq_ft) as jan_sales_per_sq_foot
 	,sum(feb_sales/w_warehouse_sq_ft) as feb_sales_per_sq_foot
 	,sum(mar_sales/w_warehouse_sq_ft) as mar_sales_per_sq_foot
 	,sum(apr_sales/w_warehouse_sq_ft) as apr_sales_per_sq_foot
 	,sum(may_sales/w_warehouse_sq_ft) as may_sales_per_sq_foot
 	,sum(jun_sales/w_warehouse_sq_ft) as jun_sales_per_sq_foot
 	,sum(jul_sales/w_warehouse_sq_ft) as jul_sales_per_sq_foot
 	,sum(aug_sales/w_warehouse_sq_ft) as aug_sales_per_sq_foot
 	,sum(sep_sales/w_warehouse_sq_ft) as sep_sales_per_sq_foot
 	,sum(oct_sales/w_warehouse_sq_ft) as oct_sales_per_sq_foot
 	,sum(nov_sales/w_warehouse_sq_ft) as nov_sales_per_sq_foot
 	,sum(dec_sales/w_warehouse_sq_ft) as dec_sales_per_sq_foot
 	,sum(jan_net) as jan_net
 	,sum(feb_net) as feb_net
 	,sum(mar_net) as mar_net
 	,sum(apr_net) as apr_net
 	,sum(may_net) as may_net
 	,sum(jun_net) as jun_net
 	,sum(jul_net) as jul_net
 	,sum(aug_net) as aug_net
 	,sum(sep_net) as sep_net
 	,sum(oct_net) as oct_net
 	,sum(nov_net) as nov_net
 	,sum(dec_net) as dec_net
 from (
     select
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'HARMSTORF' || ',' || 'USPS' as ship_carriers
       ,d_year as year
 	,sum(case when d_moy = 1
 		then ws_sales_price* ws_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2
 		then ws_sales_price* ws_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3
 		then ws_sales_price* ws_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4
 		then ws_sales_price* ws_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5
 		then ws_sales_price* ws_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6
 		then ws_sales_price* ws_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7
 		then ws_sales_price* ws_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8
 		then ws_sales_price* ws_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9
 		then ws_sales_price* ws_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10
 		then ws_sales_price* ws_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then ws_sales_price* ws_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then ws_sales_price* ws_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then ws_net_paid_inc_tax * ws_quantity else 0 end) as dec_net
     from
          web_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	  ,ship_mode
     where
            ws_warehouse_sk =  w_warehouse_sk
        and ws_sold_date_sk = d_date_sk
        and ws_sold_time_sk = t_time_sk
 	and ws_ship_mode_sk = sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 24285 and 24285+28800
 	and sm_carrier in ('HARMSTORF','USPS')
     group by
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 union all
     select
 	w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,'HARMSTORF' || ',' || 'USPS' as ship_carriers
       ,d_year as year
 	,sum(case when d_moy = 1
 		then cs_ext_list_price* cs_quantity else 0 end) as jan_sales
 	,sum(case when d_moy = 2
 		then cs_ext_list_price* cs_quantity else 0 end) as feb_sales
 	,sum(case when d_moy = 3
 		then cs_ext_list_price* cs_quantity else 0 end) as mar_sales
 	,sum(case when d_moy = 4
 		then cs_ext_list_price* cs_quantity else 0 end) as apr_sales
 	,sum(case when d_moy = 5
 		then cs_ext_list_price* cs_quantity else 0 end) as may_sales
 	,sum(case when d_moy = 6
 		then cs_ext_list_price* cs_quantity else 0 end) as jun_sales
 	,sum(case when d_moy = 7
 		then cs_ext_list_price* cs_quantity else 0 end) as jul_sales
 	,sum(case when d_moy = 8
 		then cs_ext_list_price* cs_quantity else 0 end) as aug_sales
 	,sum(case when d_moy = 9
 		then cs_ext_list_price* cs_quantity else 0 end) as sep_sales
 	,sum(case when d_moy = 10
 		then cs_ext_list_price* cs_quantity else 0 end) as oct_sales
 	,sum(case when d_moy = 11
 		then cs_ext_list_price* cs_quantity else 0 end) as nov_sales
 	,sum(case when d_moy = 12
 		then cs_ext_list_price* cs_quantity else 0 end) as dec_sales
 	,sum(case when d_moy = 1
 		then cs_net_paid * cs_quantity else 0 end) as jan_net
 	,sum(case when d_moy = 2
 		then cs_net_paid * cs_quantity else 0 end) as feb_net
 	,sum(case when d_moy = 3
 		then cs_net_paid * cs_quantity else 0 end) as mar_net
 	,sum(case when d_moy = 4
 		then cs_net_paid * cs_quantity else 0 end) as apr_net
 	,sum(case when d_moy = 5
 		then cs_net_paid * cs_quantity else 0 end) as may_net
 	,sum(case when d_moy = 6
 		then cs_net_paid * cs_quantity else 0 end) as jun_net
 	,sum(case when d_moy = 7
 		then cs_net_paid * cs_quantity else 0 end) as jul_net
 	,sum(case when d_moy = 8
 		then cs_net_paid * cs_quantity else 0 end) as aug_net
 	,sum(case when d_moy = 9
 		then cs_net_paid * cs_quantity else 0 end) as sep_net
 	,sum(case when d_moy = 10
 		then cs_net_paid * cs_quantity else 0 end) as oct_net
 	,sum(case when d_moy = 11
 		then cs_net_paid * cs_quantity else 0 end) as nov_net
 	,sum(case when d_moy = 12
 		then cs_net_paid * cs_quantity else 0 end) as dec_net
     from
          catalog_sales
         ,warehouse
         ,date_dim
         ,time_dim
 	 ,ship_mode
     where
            cs_warehouse_sk =  w_warehouse_sk
        and cs_sold_date_sk = d_date_sk
        and cs_sold_time_sk = t_time_sk
 	and cs_ship_mode_sk = sm_ship_mode_sk
        and d_year = 2002
 	and t_time between 24285 AND 24285+28800
 	and sm_carrier in ('HARMSTORF','USPS')
     group by
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
       ,d_year
 ) x
 group by
        w_warehouse_name
 	,w_warehouse_sq_ft
 	,w_city
 	,w_county
 	,w_state
 	,w_country
 	,ship_carriers
       ,year
 order by w_warehouse_name
 limit 100;
---- PLAN
Max Per-Host Resource Reservation: Memory=36.56MB Threads=6
Per-Host Resource Estimates: Memory=586MB
F00:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=585.75MB mem-reservation=36.56MB thread-reservation=6 runtime-filters-memory=8.00MB
PLAN-ROOT SINK
|  output exprs: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`, sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / w_warehouse_sq_ft), sum(feb_sales / w_warehouse_sq_ft), sum(mar_sales / w_warehouse_sq_ft), sum(apr_sales / w_warehouse_sq_ft), sum(may_sales / w_warehouse_sq_ft), sum(jun_sales / w_warehouse_sq_ft), sum(jul_sales / w_warehouse_sq_ft), sum(aug_sales / w_warehouse_sq_ft), sum(sep_sales / w_warehouse_sq_ft), sum(oct_sales / w_warehouse_sq_ft), sum(nov_sales / w_warehouse_sq_ft), sum(dec_sales / w_warehouse_sq_ft), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|
22:TOP-N [LIMIT=100]
|  order by: w_warehouse_name ASC
|  mem-estimate=6.97KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=714B cardinality=10
|  in pipelines: 22(GETNEXT), 21(OPEN)
|
21:AGGREGATE [FINALIZE]
|  output: sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(feb_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(mar_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(apr_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(may_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jun_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jul_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(aug_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(sep_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(oct_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(nov_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(dec_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, year
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=714B cardinality=10
|  in pipelines: 21(GETNEXT), 10(OPEN), 20(OPEN)
|
00:UNION
|  mem-estimate=0B mem-reservation=0B thread-reservation=0
|  tuple-ids=12 row-size=522B cardinality=10
|  in pipelines: 10(GETNEXT), 20(GETNEXT)
|
|--20:AGGREGATE [FINALIZE]
|  |  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=10.00MB mem-reservation=2.88MB spill-buffer=128.00KB thread-reservation=0
|  |  tuple-ids=11 row-size=510B cardinality=5
|  |  in pipelines: 20(GETNEXT), 11(OPEN)
|  |
|  19:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_warehouse_sk = w_warehouse_sk
|  |  fk/pk conjuncts: cs_warehouse_sk = w_warehouse_sk
|  |  runtime filters: RF008[bloom] <- w_warehouse_sk, RF009[min_max] <- w_warehouse_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9,8,7 row-size=196B cardinality=3.65K
|  |  in pipelines: 11(GETNEXT), 12(OPEN)
|  |
|  |--12:SCAN HDFS [tpcds_parquet.warehouse]
|  |     HDFS partitions=1/1 files=1 size=4.38KB
|  |     stored statistics:
|  |       table: rows=5 size=4.38KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=5
|  |     mem-estimate=112.00MB mem-reservation=56.00KB thread-reservation=1
|  |     tuple-ids=7 row-size=126B cardinality=5
|  |     in pipelines: 12(GETNEXT)
|  |
|  18:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_sold_date_sk = d_date_sk
|  |  fk/pk conjuncts: cs_sold_date_sk = d_date_sk
|  |  runtime filters: RF010[bloom] <- d_date_sk, RF011[min_max] <- d_date_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9,8 row-size=71B cardinality=3.65K
|  |  in pipelines: 11(GETNEXT), 13(OPEN)
|  |
|  |--13:SCAN HDFS [tpcds_parquet.date_dim]
|  |     HDFS partitions=1/1 files=1 size=2.15MB
|  |     predicates: d_year = CAST(2002 AS INT)
|  |     stored statistics:
|  |       table: rows=73.05K size=2.15MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=73.05K
|  |     parquet statistics predicates: d_year = CAST(2002 AS INT)
|  |     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|  |     mem-estimate=48.00MB mem-reservation=512.00KB thread-reservation=1
|  |     tuple-ids=8 row-size=12B cardinality=373
|  |     in pipelines: 13(GETNEXT)
|  |
|  17:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_sold_time_sk = t_time_sk
|  |  fk/pk conjuncts: cs_sold_time_sk = t_time_sk
|  |  runtime filters: RF012[bloom] <- t_time_sk, RF013[min_max] <- t_time_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9 row-size=59B cardinality=17.86K
|  |  in pipelines: 11(GETNEXT), 14(OPEN)
|  |
|  |--14:SCAN HDFS [tpcds_parquet.time_dim]
|  |     HDFS partitions=1/1 files=1 size=1.31MB
|  |     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     stored statistics:
|  |       table: rows=86.40K size=1.31MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=86.40K
|  |     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     mem-estimate=32.00MB mem-reservation=1.00MB thread-reservation=1
|  |     tuple-ids=9 row-size=8B cardinality=8.64K
|  |     in pipelines: 14(GETNEXT)
|  |
|  16:HASH JOIN [INNER JOIN]
|  |  hash predicates: cs_ship_mode_sk = sm_ship_mode_sk
|  |  fk/pk conjuncts: cs_ship_mode_sk = sm_ship_mode_sk
|  |  runtime filters: RF014[bloom] <- sm_ship_mode_sk, RF015[min_max] <- sm_ship_mode_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10 row-size=51B cardinality=144.16K
|  |  in pipelines: 11(GETNEXT), 15(OPEN)
|  |
|  |--15:SCAN HDFS [tpcds_parquet.ship_mode]
|  |     HDFS partitions=1/1 files=1 size=2.68KB
|  |     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     stored statistics:
|  |       table: rows=20 size=2.68KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=20
|  |     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     mem-estimate=32.00MB mem-reservation=16.00KB thread-reservation=1
|  |     tuple-ids=10 row-size=23B cardinality=2
|  |     in pipelines: 15(GETNEXT)
|  |
|  11:SCAN HDFS [tpcds_parquet.catalog_sales]
|     HDFS partitions=1/1 files=3 size=96.62MB
|     runtime filters: RF015[min_max] -> cs_ship_mode_sk, RF013[min_max] -> cs_sold_time_sk, RF011[min_max] -> cs_sold_date_sk, RF009[min_max] -> cs_warehouse_sk, RF014[bloom] -> cs_ship_mode_sk, RF012[bloom] -> cs_sold_time_sk, RF010[bloom] -> cs_sold_date_sk, RF008[bloom] -> cs_warehouse_sk
|     stored statistics:
|       table: rows=1.44M size=96.62MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=650.14K
|     mem-estimate=336.00MB mem-reservation=16.00MB thread-reservation=1
|     tuple-ids=6 row-size=28B cardinality=144.16K(filtered from 1.44M)
|     in pipelines: 11(GETNEXT)
|
10:AGGREGATE [FINALIZE]
|  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=10.00MB mem-reservation=2.88MB spill-buffer=128.00KB thread-reservation=0
|  tuple-ids=5 row-size=510B cardinality=5
|  in pipelines: 10(GETNEXT), 01(OPEN)
|
09:HASH JOIN [INNER JOIN]
|  hash predicates: ws_warehouse_sk = w_warehouse_sk
|  fk/pk conjuncts: ws_warehouse_sk = w_warehouse_sk
|  runtime filters: RF000[bloom] <- w_warehouse_sk, RF001[min_max] <- w_warehouse_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2,3,1 row-size=196B cardinality=3.22K
|  in pipelines: 01(GETNEXT), 02(OPEN)
|
|--02:SCAN HDFS [tpcds_parquet.warehouse]
|     HDFS partitions=1/1 files=1 size=4.38KB
|     stored statistics:
|       table: rows=5 size=4.38KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=5
|     mem-estimate=112.00MB mem-reservation=56.00KB thread-reservation=1
|     tuple-ids=1 row-size=126B cardinality=5
|     in pipelines: 02(GETNEXT)
|
08:HASH JOIN [INNER JOIN]
|  hash predicates: ws_sold_time_sk = t_time_sk
|  fk/pk conjuncts: ws_sold_time_sk = t_time_sk
|  runtime filters: RF002[bloom] <- t_time_sk, RF003[min_max] <- t_time_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2,3 row-size=71B cardinality=3.22K
|  in pipelines: 01(GETNEXT), 04(OPEN)
|
|--04:SCAN HDFS [tpcds_parquet.time_dim]
|     HDFS partitions=1/1 files=1 size=1.31MB
|     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     stored statistics:
|       table: rows=86.40K size=1.31MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=86.40K
|     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     mem-estimate=32.00MB mem-reservation=1.00MB thread-reservation=1
|     tuple-ids=3 row-size=8B cardinality=8.64K
|     in pipelines: 04(GETNEXT)
|
07:HASH JOIN [INNER JOIN]
|  hash predicates: ws_sold_date_sk = d_date_sk
|  fk/pk conjuncts: ws_sold_date_sk = d_date_sk
|  runtime filters: RF004[bloom] <- d_date_sk, RF005[min_max] <- d_date_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2 row-size=63B cardinality=14.80K
|  in pipelines: 01(GETNEXT), 03(OPEN)
|
|--03:SCAN HDFS [tpcds_parquet.date_dim]
|     HDFS partitions=1/1 files=1 size=2.15MB
|     predicates: d_year = CAST(2002 AS INT)
|     stored statistics:
|       table: rows=73.05K size=2.15MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=73.05K
|     parquet statistics predicates: d_year = CAST(2002 AS INT)
|     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|     mem-estimate=48.00MB mem-reservation=512.00KB thread-reservation=1
|     tuple-ids=2 row-size=12B cardinality=373
|     in pipelines: 03(GETNEXT)
|
06:HASH JOIN [INNER JOIN]
|  hash predicates: ws_ship_mode_sk = sm_ship_mode_sk
|  fk/pk conjuncts: ws_ship_mode_sk = sm_ship_mode_sk
|  runtime filters: RF006[bloom] <- sm_ship_mode_sk, RF007[min_max] <- sm_ship_mode_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4 row-size=51B cardinality=71.94K(filtered from 71.94K)
|  in pipelines: 01(GETNEXT), 05(OPEN)
|
|--05:SCAN HDFS [tpcds_parquet.ship_mode]
|     HDFS partitions=1/1 files=1 size=2.68KB
|     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     stored statistics:
|       table: rows=20 size=2.68KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=20
|     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     mem-estimate=32.00MB mem-reservation=16.00KB thread-reservation=1
|     tuple-ids=4 row-size=23B cardinality=2
|     in pipelines: 05(GETNEXT)
|
01:SCAN HDFS [tpcds_parquet.web_sales]
   HDFS partitions=1/1 files=2 size=45.09MB
   runtime filters: RF007[min_max] -> ws_ship_mode_sk, RF005[min_max] -> ws_sold_date_sk, RF003[min_max] -> ws_sold_time_sk, RF001[min_max] -> ws_warehouse_sk, RF006[bloom] -> ws_ship_mode_sk, RF004[bloom] -> ws_sold_date_sk, RF002[bloom] -> ws_sold_time_sk, RF000[bloom] -> ws_warehouse_sk
   stored statistics:
     table: rows=719.38K size=45.09MB
     columns: all
   extrapolated-rows=disabled max-scan-range-rows=644.77K
   mem-estimate=224.00MB mem-reservation=8.00MB thread-reservation=1
   tuple-ids=0 row-size=28B cardinality=71.94K(filtered from 719.38K)
   in pipelines: 01(GETNEXT)
---- DISTRIBUTEDPLAN
Max Per-Host Resource Reservation: Memory=64.52MB Threads=23
Per-Host Resource Estimates: Memory=1.08GB
F14:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=4.02MB mem-reservation=4.00MB thread-reservation=1
PLAN-ROOT SINK
|  output exprs: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`, sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / w_warehouse_sq_ft), sum(feb_sales / w_warehouse_sq_ft), sum(mar_sales / w_warehouse_sq_ft), sum(apr_sales / w_warehouse_sq_ft), sum(may_sales / w_warehouse_sq_ft), sum(jun_sales / w_warehouse_sq_ft), sum(jul_sales / w_warehouse_sq_ft), sum(aug_sales / w_warehouse_sq_ft), sum(sep_sales / w_warehouse_sq_ft), sum(oct_sales / w_warehouse_sq_ft), sum(nov_sales / w_warehouse_sq_ft), sum(dec_sales / w_warehouse_sq_ft), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|
37:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: w_warehouse_name ASC
|  limit: 100
|  mem-estimate=23.34KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=714B cardinality=10
|  in pipelines: 22(GETNEXT)
|
F13:PLAN FRAGMENT [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)] hosts=3 instances=3
Per-Host Resources: mem-estimate=10.02MB mem-reservation=1.94MB thread-reservation=1
22:TOP-N [LIMIT=100]
|  order by: w_warehouse_name ASC
|  mem-estimate=6.97KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=714B cardinality=10
|  in pipelines: 22(GETNEXT), 36(OPEN)
|
36:AGGREGATE [FINALIZE]
|  output: sum:merge(jan_sales), sum:merge(feb_sales), sum:merge(mar_sales), sum:merge(apr_sales), sum:merge(may_sales), sum:merge(jun_sales), sum:merge(jul_sales), sum:merge(aug_sales), sum:merge(sep_sales), sum:merge(oct_sales), sum:merge(nov_sales), sum:merge(dec_sales), sum:merge(jan_sales / w_warehouse_sq_ft), sum:merge(feb_sales / w_warehouse_sq_ft), sum:merge(mar_sales / w_warehouse_sq_ft), sum:merge(apr_sales / w_warehouse_sq_ft), sum:merge(may_sales / w_warehouse_sq_ft), sum:merge(jun_sales / w_warehouse_sq_ft), sum:merge(jul_sales / w_warehouse_sq_ft), sum:merge(aug_sales / w_warehouse_sq_ft), sum:merge(sep_sales / w_warehouse_sq_ft), sum:merge(oct_sales / w_warehouse_sq_ft), sum:merge(nov_sales / w_warehouse_sq_ft), sum:merge(dec_sales / w_warehouse_sq_ft), sum:merge(jan_net), sum:merge(feb_net), sum:merge(mar_net), sum:merge(apr_net), sum:merge(may_net), sum:merge(jun_net), sum:merge(jul_net), sum:merge(aug_net), sum:merge(sep_net), sum:merge(oct_net), sum:merge(nov_net), sum:merge(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=714B cardinality=10
|  in pipelines: 36(GETNEXT), 28(OPEN), 34(OPEN)
|
35:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)]
|  mem-estimate=23.34KB mem-reservation=0B thread-reservation=0
|  tuple-ids=14 row-size=714B cardinality=10
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
F12:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
Per-Host Resources: mem-estimate=28.43MB mem-reservation=3.94MB thread-reservation=1
21:AGGREGATE [STREAMING]
|  output: sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(feb_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(mar_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(apr_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(may_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jun_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jul_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(aug_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(sep_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(oct_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(nov_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(dec_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, year
|  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=714B cardinality=10
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
00:UNION
|  mem-estimate=0B mem-reservation=0B thread-reservation=0
|  tuple-ids=12 row-size=522B cardinality=10
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
|--34:AGGREGATE [FINALIZE]
|  |  output: sum:merge(CASE WHEN d_moy = 1 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_net_paid * cs_quantity ELSE 0 END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=11 row-size=510B cardinality=5
|  |  in pipelines: 34(GETNEXT), 11(OPEN)
|  |
|  33:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  |  mem-estimate=25.05KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=11 row-size=510B cardinality=15
|  |  in pipelines: 11(GETNEXT)
|  |
|  F06:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
|  Per-Host Resources: mem-estimate=363.77MB mem-reservation=29.75MB thread-reservation=2 runtime-filters-memory=4.00MB
|  20:AGGREGATE [STREAMING]
|  |  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=11 row-size=510B cardinality=15
|  |  in pipelines: 11(GETNEXT)
|  |
|  19:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash predicates: cs_warehouse_sk = w_warehouse_sk
|  |  fk/pk conjuncts: cs_warehouse_sk = w_warehouse_sk
|  |  runtime filters: RF008[bloom] <- w_warehouse_sk, RF009[min_max] <- w_warehouse_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9,8,7 row-size=196B cardinality=3.65K
|  |  in pipelines: 11(GETNEXT), 12(OPEN)
|  |
|  |--32:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=7 row-size=126B cardinality=5
|  |  |  in pipelines: 12(GETNEXT)
|  |  |
|  |  F10:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Host Resources: mem-estimate=112.51MB mem-reservation=56.00KB thread-reservation=2
|  |  12:SCAN HDFS [tpcds_parquet.warehouse, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=4.38KB
|  |     stored statistics:
|  |       table: rows=5 size=4.38KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=5
|  |     mem-estimate=112.00MB mem-reservation=56.00KB thread-reservation=1
|  |     tuple-ids=7 row-size=126B cardinality=5
|  |     in pipelines: 12(GETNEXT)
|  |
|  18:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash predicates: cs_sold_date_sk = d_date_sk
|  |  fk/pk conjuncts: cs_sold_date_sk = d_date_sk
|  |  runtime filters: RF010[bloom] <- d_date_sk, RF011[min_max] <- d_date_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9,8 row-size=71B cardinality=3.65K
|  |  in pipelines: 11(GETNEXT), 13(OPEN)
|  |
|  |--31:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=8 row-size=12B cardinality=373
|  |  |  in pipelines: 13(GETNEXT)
|  |  |
|  |  F09:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Host Resources: mem-estimate=48.06MB mem-reservation=512.00KB thread-reservation=2
|  |  13:SCAN HDFS [tpcds_parquet.date_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.15MB
|  |     predicates: d_year = CAST(2002 AS INT)
|  |     stored statistics:
|  |       table: rows=73.05K size=2.15MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=73.05K
|  |     parquet statistics predicates: d_year = CAST(2002 AS INT)
|  |     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|  |     mem-estimate=48.00MB mem-reservation=512.00KB thread-reservation=1
|  |     tuple-ids=8 row-size=12B cardinality=373
|  |     in pipelines: 13(GETNEXT)
|  |
|  17:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash predicates: cs_sold_time_sk = t_time_sk
|  |  fk/pk conjuncts: cs_sold_time_sk = t_time_sk
|  |  runtime filters: RF012[bloom] <- t_time_sk, RF013[min_max] <- t_time_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9 row-size=59B cardinality=17.86K
|  |  in pipelines: 11(GETNEXT), 14(OPEN)
|  |
|  |--30:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=9 row-size=8B cardinality=8.64K
|  |  |  in pipelines: 14(GETNEXT)
|  |  |
|  |  F08:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Host Resources: mem-estimate=32.05MB mem-reservation=1.00MB thread-reservation=2
|  |  14:SCAN HDFS [tpcds_parquet.time_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=1.31MB
|  |     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     stored statistics:
|  |       table: rows=86.40K size=1.31MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=86.40K
|  |     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     mem-estimate=32.00MB mem-reservation=1.00MB thread-reservation=1
|  |     tuple-ids=9 row-size=8B cardinality=8.64K
|  |     in pipelines: 14(GETNEXT)
|  |
|  16:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash predicates: cs_ship_mode_sk = sm_ship_mode_sk
|  |  fk/pk conjuncts: cs_ship_mode_sk = sm_ship_mode_sk
|  |  runtime filters: RF014[bloom] <- sm_ship_mode_sk, RF015[min_max] <- sm_ship_mode_sk
|  |  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10 row-size=51B cardinality=144.16K
|  |  in pipelines: 11(GETNEXT), 15(OPEN)
|  |
|  |--29:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=10 row-size=23B cardinality=2
|  |  |  in pipelines: 15(GETNEXT)
|  |  |
|  |  F07:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Host Resources: mem-estimate=32.10MB mem-reservation=16.00KB thread-reservation=2
|  |  15:SCAN HDFS [tpcds_parquet.ship_mode, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.68KB
|  |     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     stored statistics:
|  |       table: rows=20 size=2.68KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=20
|  |     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     mem-estimate=32.00MB mem-reservation=16.00KB thread-reservation=1
|  |     tuple-ids=10 row-size=23B cardinality=2
|  |     in pipelines: 15(GETNEXT)
|  |
|  11:SCAN HDFS [tpcds_parquet.catalog_sales, RANDOM]
|     HDFS partitions=1/1 files=3 size=96.62MB
|     runtime filters: RF015[min_max] -> cs_ship_mode_sk, RF013[min_max] -> cs_sold_time_sk, RF011[min_max] -> cs_sold_date_sk, RF009[min_max] -> cs_warehouse_sk, RF014[bloom] -> cs_ship_mode_sk, RF012[bloom] -> cs_sold_time_sk, RF010[bloom] -> cs_sold_date_sk, RF008[bloom] -> cs_warehouse_sk
|     stored statistics:
|       table: rows=1.44M size=96.62MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=650.14K
|     mem-estimate=336.00MB mem-reservation=16.00MB thread-reservation=1
|     tuple-ids=6 row-size=28B cardinality=144.16K(filtered from 1.44M)
|     in pipelines: 11(GETNEXT)
|
28:AGGREGATE [FINALIZE]
|  output: sum:merge(CASE WHEN d_moy = 1 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=5 row-size=510B cardinality=5
|  in pipelines: 28(GETNEXT), 01(OPEN)
|
27:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  tuple-ids=5 row-size=510B cardinality=10
|  in pipelines: 01(GETNEXT)
|
F00:PLAN FRAGMENT [RANDOM] hosts=2 instances=2
Per-Host Resources: mem-estimate=251.77MB mem-reservation=21.75MB thread-reservation=2 runtime-filters-memory=4.00MB
10:AGGREGATE [STREAMING]
|  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=5 row-size=510B cardinality=10
|  in pipelines: 01(GETNEXT)
|
09:HASH JOIN [INNER JOIN, BROADCAST]
|  hash predicates: ws_warehouse_sk = w_warehouse_sk
|  fk/pk conjuncts: ws_warehouse_sk = w_warehouse_sk
|  runtime filters: RF000[bloom] <- w_warehouse_sk, RF001[min_max] <- w_warehouse_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2,3,1 row-size=196B cardinality=3.22K
|  in pipelines: 01(GETNEXT), 02(OPEN)
|
|--26:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=1 row-size=126B cardinality=5
|  |  in pipelines: 02(GETNEXT)
|  |
|  F04:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=112.51MB mem-reservation=56.00KB thread-reservation=2
|  02:SCAN HDFS [tpcds_parquet.warehouse, RANDOM]
|     HDFS partitions=1/1 files=1 size=4.38KB
|     stored statistics:
|       table: rows=5 size=4.38KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=5
|     mem-estimate=112.00MB mem-reservation=56.00KB thread-reservation=1
|     tuple-ids=1 row-size=126B cardinality=5
|     in pipelines: 02(GETNEXT)
|
08:HASH JOIN [INNER JOIN, BROADCAST]
|  hash predicates: ws_sold_time_sk = t_time_sk
|  fk/pk conjuncts: ws_sold_time_sk = t_time_sk
|  runtime filters: RF002[bloom] <- t_time_sk, RF003[min_max] <- t_time_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2,3 row-size=71B cardinality=3.22K
|  in pipelines: 01(GETNEXT), 04(OPEN)
|
|--25:EXCHANGE [BROADCAST]
|  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=3 row-size=8B cardinality=8.64K
|  |  in pipelines: 04(GETNEXT)
|  |
|  F03:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=32.05MB mem-reservation=1.00MB thread-reservation=2
|  04:SCAN HDFS [tpcds_parquet.time_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=1.31MB
|     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     stored statistics:
|       table: rows=86.40K size=1.31MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=86.40K
|     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     mem-estimate=32.00MB mem-reservation=1.00MB thread-reservation=1
|     tuple-ids=3 row-size=8B cardinality=8.64K
|     in pipelines: 04(GETNEXT)
|
07:HASH JOIN [INNER JOIN, BROADCAST]
|  hash predicates: ws_sold_date_sk = d_date_sk
|  fk/pk conjuncts: ws_sold_date_sk = d_date_sk
|  runtime filters: RF004[bloom] <- d_date_sk, RF005[min_max] <- d_date_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2 row-size=63B cardinality=14.80K
|  in pipelines: 01(GETNEXT), 03(OPEN)
|
|--24:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=2 row-size=12B cardinality=373
|  |  in pipelines: 03(GETNEXT)
|  |
|  F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=48.06MB mem-reservation=512.00KB thread-reservation=2
|  03:SCAN HDFS [tpcds_parquet.date_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.15MB
|     predicates: d_year = CAST(2002 AS INT)
|     stored statistics:
|       table: rows=73.05K size=2.15MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=73.05K
|     parquet statistics predicates: d_year = CAST(2002 AS INT)
|     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|     mem-estimate=48.00MB mem-reservation=512.00KB thread-reservation=1
|     tuple-ids=2 row-size=12B cardinality=373
|     in pipelines: 03(GETNEXT)
|
06:HASH JOIN [INNER JOIN, BROADCAST]
|  hash predicates: ws_ship_mode_sk = sm_ship_mode_sk
|  fk/pk conjuncts: ws_ship_mode_sk = sm_ship_mode_sk
|  runtime filters: RF006[bloom] <- sm_ship_mode_sk, RF007[min_max] <- sm_ship_mode_sk
|  mem-estimate=1.94MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4 row-size=51B cardinality=71.94K(filtered from 71.94K)
|  in pipelines: 01(GETNEXT), 05(OPEN)
|
|--23:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=4 row-size=23B cardinality=2
|  |  in pipelines: 05(GETNEXT)
|  |
|  F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Host Resources: mem-estimate=32.10MB mem-reservation=16.00KB thread-reservation=2
|  05:SCAN HDFS [tpcds_parquet.ship_mode, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.68KB
|     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     stored statistics:
|       table: rows=20 size=2.68KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=20
|     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     mem-estimate=32.00MB mem-reservation=16.00KB thread-reservation=1
|     tuple-ids=4 row-size=23B cardinality=2
|     in pipelines: 05(GETNEXT)
|
01:SCAN HDFS [tpcds_parquet.web_sales, RANDOM]
   HDFS partitions=1/1 files=2 size=45.09MB
   runtime filters: RF007[min_max] -> ws_ship_mode_sk, RF005[min_max] -> ws_sold_date_sk, RF003[min_max] -> ws_sold_time_sk, RF001[min_max] -> ws_warehouse_sk, RF006[bloom] -> ws_ship_mode_sk, RF004[bloom] -> ws_sold_date_sk, RF002[bloom] -> ws_sold_time_sk, RF000[bloom] -> ws_warehouse_sk
   stored statistics:
     table: rows=719.38K size=45.09MB
     columns: all
   extrapolated-rows=disabled max-scan-range-rows=644.77K
   mem-estimate=224.00MB mem-reservation=8.00MB thread-reservation=1
   tuple-ids=0 row-size=28B cardinality=71.94K(filtered from 719.38K)
   in pipelines: 01(GETNEXT)
---- PARALLELPLANS
Max Per-Host Resource Reservation: Memory=88.02MB Threads=21
Per-Host Resource Estimates: Memory=331MB
F14:PLAN FRAGMENT [UNPARTITIONED] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=4.02MB mem-reservation=4.00MB thread-reservation=1
PLAN-ROOT SINK
|  output exprs: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`, sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / w_warehouse_sq_ft), sum(feb_sales / w_warehouse_sq_ft), sum(mar_sales / w_warehouse_sq_ft), sum(apr_sales / w_warehouse_sq_ft), sum(may_sales / w_warehouse_sq_ft), sum(jun_sales / w_warehouse_sq_ft), sum(jul_sales / w_warehouse_sq_ft), sum(aug_sales / w_warehouse_sq_ft), sum(sep_sales / w_warehouse_sq_ft), sum(oct_sales / w_warehouse_sq_ft), sum(nov_sales / w_warehouse_sq_ft), sum(dec_sales / w_warehouse_sq_ft), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  mem-estimate=4.00MB mem-reservation=4.00MB spill-buffer=2.00MB thread-reservation=0
|
37:MERGING-EXCHANGE [UNPARTITIONED]
|  order by: w_warehouse_name ASC
|  limit: 100
|  mem-estimate=23.34KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=714B cardinality=10
|  in pipelines: 22(GETNEXT)
|
F13:PLAN FRAGMENT [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)] hosts=3 instances=3
Per-Instance Resources: mem-estimate=10.02MB mem-reservation=1.94MB thread-reservation=1
22:TOP-N [LIMIT=100]
|  order by: w_warehouse_name ASC
|  mem-estimate=6.97KB mem-reservation=0B thread-reservation=0
|  tuple-ids=15 row-size=714B cardinality=10
|  in pipelines: 22(GETNEXT), 36(OPEN)
|
36:AGGREGATE [FINALIZE]
|  output: sum:merge(jan_sales), sum:merge(feb_sales), sum:merge(mar_sales), sum:merge(apr_sales), sum:merge(may_sales), sum:merge(jun_sales), sum:merge(jul_sales), sum:merge(aug_sales), sum:merge(sep_sales), sum:merge(oct_sales), sum:merge(nov_sales), sum:merge(dec_sales), sum:merge(jan_sales / w_warehouse_sq_ft), sum:merge(feb_sales / w_warehouse_sq_ft), sum:merge(mar_sales / w_warehouse_sq_ft), sum:merge(apr_sales / w_warehouse_sq_ft), sum:merge(may_sales / w_warehouse_sq_ft), sum:merge(jun_sales / w_warehouse_sq_ft), sum:merge(jul_sales / w_warehouse_sq_ft), sum:merge(aug_sales / w_warehouse_sq_ft), sum:merge(sep_sales / w_warehouse_sq_ft), sum:merge(oct_sales / w_warehouse_sq_ft), sum:merge(nov_sales / w_warehouse_sq_ft), sum:merge(dec_sales / w_warehouse_sq_ft), sum:merge(jan_net), sum:merge(feb_net), sum:merge(mar_net), sum:merge(apr_net), sum:merge(may_net), sum:merge(jun_net), sum:merge(jul_net), sum:merge(aug_net), sum:merge(sep_net), sum:merge(oct_net), sum:merge(nov_net), sum:merge(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, `year`
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=714B cardinality=10
|  in pipelines: 36(GETNEXT), 28(OPEN), 34(OPEN)
|
35:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,ship_carriers,`year`)]
|  mem-estimate=23.34KB mem-reservation=0B thread-reservation=0
|  tuple-ids=14 row-size=714B cardinality=10
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
F12:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
Per-Instance Resources: mem-estimate=28.43MB mem-reservation=3.94MB thread-reservation=1
21:AGGREGATE [STREAMING]
|  output: sum(jan_sales), sum(feb_sales), sum(mar_sales), sum(apr_sales), sum(may_sales), sum(jun_sales), sum(jul_sales), sum(aug_sales), sum(sep_sales), sum(oct_sales), sum(nov_sales), sum(dec_sales), sum(jan_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(feb_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(mar_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(apr_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(may_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jun_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jul_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(aug_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(sep_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(oct_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(nov_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(dec_sales / CAST(w_warehouse_sq_ft AS DECIMAL(10,0))), sum(jan_net), sum(feb_net), sum(mar_net), sum(apr_net), sum(may_net), sum(jun_net), sum(jul_net), sum(aug_net), sum(sep_net), sum(oct_net), sum(nov_net), sum(dec_net)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, ship_carriers, year
|  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=14 row-size=714B cardinality=10
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
00:UNION
|  mem-estimate=0B mem-reservation=0B thread-reservation=0
|  tuple-ids=12 row-size=522B cardinality=10
|  in pipelines: 28(GETNEXT), 34(GETNEXT)
|
|--34:AGGREGATE [FINALIZE]
|  |  output: sum:merge(CASE WHEN d_moy = 1 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_ext_list_price * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN cs_net_paid * cs_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN cs_net_paid * cs_quantity ELSE 0 END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=11 row-size=510B cardinality=5
|  |  in pipelines: 34(GETNEXT), 11(OPEN)
|  |
|  33:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  |  mem-estimate=25.05KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=11 row-size=510B cardinality=15
|  |  in pipelines: 11(GETNEXT)
|  |
|  F06:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
|  Per-Host Shared Resources: mem-estimate=4.00MB mem-reservation=4.00MB thread-reservation=0 runtime-filters-memory=4.00MB
|  Per-Instance Resources: mem-estimate=64.02MB mem-reservation=18.00MB thread-reservation=1
|  20:AGGREGATE [STREAMING]
|  |  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_ext_list_price * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN cs_net_paid * CAST(cs_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  |  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  |  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=11 row-size=510B cardinality=15
|  |  in pipelines: 11(GETNEXT)
|  |
|  19:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=04
|  |  hash predicates: cs_warehouse_sk = w_warehouse_sk
|  |  fk/pk conjuncts: cs_warehouse_sk = w_warehouse_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9,8,7 row-size=196B cardinality=3.65K
|  |  in pipelines: 11(GETNEXT), 12(OPEN)
|  |
|  |--F19:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
|  |  |  Per-Instance Resources: mem-estimate=4.89MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  JOIN BUILD
|  |  |  join-table-id=04 plan-id=05 cohort-id=02
|  |  |  build expressions: w_warehouse_sk
|  |  |  runtime filters: RF008[bloom] <- w_warehouse_sk, RF009[min_max] <- w_warehouse_sk
|  |  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |  |
|  |  32:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=7 row-size=126B cardinality=5
|  |  |  in pipelines: 12(GETNEXT)
|  |  |
|  |  F10:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=16.51MB mem-reservation=56.00KB thread-reservation=1
|  |  12:SCAN HDFS [tpcds_parquet.warehouse, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=4.38KB
|  |     stored statistics:
|  |       table: rows=5 size=4.38KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=5
|  |     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|  |     tuple-ids=7 row-size=126B cardinality=5
|  |     in pipelines: 12(GETNEXT)
|  |
|  18:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=05
|  |  hash predicates: cs_sold_date_sk = d_date_sk
|  |  fk/pk conjuncts: cs_sold_date_sk = d_date_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9,8 row-size=71B cardinality=3.65K
|  |  in pipelines: 11(GETNEXT), 13(OPEN)
|  |
|  |--F20:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
|  |  |  Per-Instance Resources: mem-estimate=4.89MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  JOIN BUILD
|  |  |  join-table-id=05 plan-id=06 cohort-id=02
|  |  |  build expressions: d_date_sk
|  |  |  runtime filters: RF010[bloom] <- d_date_sk, RF011[min_max] <- d_date_sk
|  |  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |  |
|  |  31:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=8 row-size=12B cardinality=373
|  |  |  in pipelines: 13(GETNEXT)
|  |  |
|  |  F09:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=16.06MB mem-reservation=512.00KB thread-reservation=1
|  |  13:SCAN HDFS [tpcds_parquet.date_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.15MB
|  |     predicates: d_year = CAST(2002 AS INT)
|  |     stored statistics:
|  |       table: rows=73.05K size=2.15MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=73.05K
|  |     parquet statistics predicates: d_year = CAST(2002 AS INT)
|  |     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|  |     tuple-ids=8 row-size=12B cardinality=373
|  |     in pipelines: 13(GETNEXT)
|  |
|  17:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=06
|  |  hash predicates: cs_sold_time_sk = t_time_sk
|  |  fk/pk conjuncts: cs_sold_time_sk = t_time_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10,9 row-size=59B cardinality=17.86K
|  |  in pipelines: 11(GETNEXT), 14(OPEN)
|  |
|  |--F21:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
|  |  |  Per-Instance Resources: mem-estimate=4.95MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  JOIN BUILD
|  |  |  join-table-id=06 plan-id=07 cohort-id=02
|  |  |  build expressions: t_time_sk
|  |  |  runtime filters: RF012[bloom] <- t_time_sk, RF013[min_max] <- t_time_sk
|  |  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |  |
|  |  30:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=9 row-size=8B cardinality=8.64K
|  |  |  in pipelines: 14(GETNEXT)
|  |  |
|  |  F08:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=16.05MB mem-reservation=1.00MB thread-reservation=1
|  |  14:SCAN HDFS [tpcds_parquet.time_dim, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=1.31MB
|  |     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     stored statistics:
|  |       table: rows=86.40K size=1.31MB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=86.40K
|  |     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|  |     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|  |     tuple-ids=9 row-size=8B cardinality=8.64K
|  |     in pipelines: 14(GETNEXT)
|  |
|  16:HASH JOIN [INNER JOIN, BROADCAST]
|  |  hash-table-id=07
|  |  hash predicates: cs_ship_mode_sk = sm_ship_mode_sk
|  |  fk/pk conjuncts: cs_ship_mode_sk = sm_ship_mode_sk
|  |  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  |  tuple-ids=6,10 row-size=51B cardinality=144.16K
|  |  in pipelines: 11(GETNEXT), 15(OPEN)
|  |
|  |--F22:PLAN FRAGMENT [RANDOM] hosts=3 instances=3
|  |  |  Per-Instance Resources: mem-estimate=4.89MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  |  JOIN BUILD
|  |  |  join-table-id=07 plan-id=08 cohort-id=02
|  |  |  build expressions: sm_ship_mode_sk
|  |  |  runtime filters: RF014[bloom] <- sm_ship_mode_sk, RF015[min_max] <- sm_ship_mode_sk
|  |  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |  |
|  |  29:EXCHANGE [BROADCAST]
|  |  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  |  tuple-ids=10 row-size=23B cardinality=2
|  |  |  in pipelines: 15(GETNEXT)
|  |  |
|  |  F07:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  |  Per-Instance Resources: mem-estimate=16.10MB mem-reservation=16.00KB thread-reservation=1
|  |  15:SCAN HDFS [tpcds_parquet.ship_mode, RANDOM]
|  |     HDFS partitions=1/1 files=1 size=2.68KB
|  |     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     stored statistics:
|  |       table: rows=20 size=2.68KB
|  |       columns: all
|  |     extrapolated-rows=disabled max-scan-range-rows=20
|  |     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|  |     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|  |     tuple-ids=10 row-size=23B cardinality=2
|  |     in pipelines: 15(GETNEXT)
|  |
|  11:SCAN HDFS [tpcds_parquet.catalog_sales, RANDOM]
|     HDFS partitions=1/1 files=3 size=96.62MB
|     runtime filters: RF015[min_max] -> cs_ship_mode_sk, RF013[min_max] -> cs_sold_time_sk, RF011[min_max] -> cs_sold_date_sk, RF009[min_max] -> cs_warehouse_sk, RF014[bloom] -> cs_ship_mode_sk, RF012[bloom] -> cs_sold_time_sk, RF010[bloom] -> cs_sold_date_sk, RF008[bloom] -> cs_warehouse_sk
|     stored statistics:
|       table: rows=1.44M size=96.62MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=650.14K
|     mem-estimate=48.00MB mem-reservation=16.00MB thread-reservation=0
|     tuple-ids=6 row-size=28B cardinality=144.16K(filtered from 1.44M)
|     in pipelines: 11(GETNEXT)
|
28:AGGREGATE [FINALIZE]
|  output: sum:merge(CASE WHEN d_moy = 1 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_sales_price * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 1 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 2 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 3 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 4 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 5 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 6 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 7 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 8 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 9 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 10 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 11 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END), sum:merge(CASE WHEN d_moy = 12 THEN ws_net_paid_inc_tax * ws_quantity ELSE 0 END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=10.00MB mem-reservation=1.94MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=5 row-size=510B cardinality=5
|  in pipelines: 28(GETNEXT), 01(OPEN)
|
27:EXCHANGE [HASH(w_warehouse_name,w_warehouse_sq_ft,w_city,w_county,w_state,w_country,d_year)]
|  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  tuple-ids=5 row-size=510B cardinality=10
|  in pipelines: 01(GETNEXT)
|
F00:PLAN FRAGMENT [RANDOM] hosts=2 instances=2
Per-Host Shared Resources: mem-estimate=4.00MB mem-reservation=4.00MB thread-reservation=0 runtime-filters-memory=4.00MB
Per-Instance Resources: mem-estimate=48.02MB mem-reservation=10.00MB thread-reservation=1
10:AGGREGATE [STREAMING]
|  output: sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_sales_price * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(1 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(2 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(3 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(4 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(5 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(6 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(7 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(8 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(9 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(10 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(11 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END), sum(CASE WHEN d_moy = CAST(12 AS INT) THEN ws_net_paid_inc_tax * CAST(ws_quantity AS DECIMAL(10,0)) ELSE CAST(0 AS DECIMAL(18,2)) END)
|  group by: w_warehouse_name, w_warehouse_sq_ft, w_city, w_county, w_state, w_country, d_year
|  mem-estimate=10.00MB mem-reservation=2.00MB spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=5 row-size=510B cardinality=10
|  in pipelines: 01(GETNEXT)
|
09:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=00
|  hash predicates: ws_warehouse_sk = w_warehouse_sk
|  fk/pk conjuncts: ws_warehouse_sk = w_warehouse_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2,3,1 row-size=196B cardinality=3.22K
|  in pipelines: 01(GETNEXT), 02(OPEN)
|
|--F15:PLAN FRAGMENT [RANDOM] hosts=2 instances=2
|  |  Per-Instance Resources: mem-estimate=4.89MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  JOIN BUILD
|  |  join-table-id=00 plan-id=01 cohort-id=01
|  |  build expressions: w_warehouse_sk
|  |  runtime filters: RF000[bloom] <- w_warehouse_sk, RF001[min_max] <- w_warehouse_sk
|  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |
|  26:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=1 row-size=126B cardinality=5
|  |  in pipelines: 02(GETNEXT)
|  |
|  F04:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=16.51MB mem-reservation=56.00KB thread-reservation=1
|  02:SCAN HDFS [tpcds_parquet.warehouse, RANDOM]
|     HDFS partitions=1/1 files=1 size=4.38KB
|     stored statistics:
|       table: rows=5 size=4.38KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=5
|     mem-estimate=16.00MB mem-reservation=56.00KB thread-reservation=0
|     tuple-ids=1 row-size=126B cardinality=5
|     in pipelines: 02(GETNEXT)
|
08:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=01
|  hash predicates: ws_sold_time_sk = t_time_sk
|  fk/pk conjuncts: ws_sold_time_sk = t_time_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2,3 row-size=71B cardinality=3.22K
|  in pipelines: 01(GETNEXT), 04(OPEN)
|
|--F16:PLAN FRAGMENT [RANDOM] hosts=2 instances=2
|  |  Per-Instance Resources: mem-estimate=4.95MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  JOIN BUILD
|  |  join-table-id=01 plan-id=02 cohort-id=01
|  |  build expressions: t_time_sk
|  |  runtime filters: RF002[bloom] <- t_time_sk, RF003[min_max] <- t_time_sk
|  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |
|  25:EXCHANGE [BROADCAST]
|  |  mem-estimate=79.50KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=3 row-size=8B cardinality=8.64K
|  |  in pipelines: 04(GETNEXT)
|  |
|  F03:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=16.05MB mem-reservation=1.00MB thread-reservation=1
|  04:SCAN HDFS [tpcds_parquet.time_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=1.31MB
|     predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     stored statistics:
|       table: rows=86.40K size=1.31MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=86.40K
|     parquet statistics predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     parquet dictionary predicates: t_time <= CAST(53085 AS INT), t_time >= CAST(24285 AS INT)
|     mem-estimate=16.00MB mem-reservation=1.00MB thread-reservation=0
|     tuple-ids=3 row-size=8B cardinality=8.64K
|     in pipelines: 04(GETNEXT)
|
07:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=02
|  hash predicates: ws_sold_date_sk = d_date_sk
|  fk/pk conjuncts: ws_sold_date_sk = d_date_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4,2 row-size=63B cardinality=14.80K
|  in pipelines: 01(GETNEXT), 03(OPEN)
|
|--F17:PLAN FRAGMENT [RANDOM] hosts=2 instances=2
|  |  Per-Instance Resources: mem-estimate=4.89MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  JOIN BUILD
|  |  join-table-id=02 plan-id=03 cohort-id=01
|  |  build expressions: d_date_sk
|  |  runtime filters: RF004[bloom] <- d_date_sk, RF005[min_max] <- d_date_sk
|  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |
|  24:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=2 row-size=12B cardinality=373
|  |  in pipelines: 03(GETNEXT)
|  |
|  F02:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=16.06MB mem-reservation=512.00KB thread-reservation=1
|  03:SCAN HDFS [tpcds_parquet.date_dim, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.15MB
|     predicates: d_year = CAST(2002 AS INT)
|     stored statistics:
|       table: rows=73.05K size=2.15MB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=73.05K
|     parquet statistics predicates: d_year = CAST(2002 AS INT)
|     parquet dictionary predicates: d_year = CAST(2002 AS INT)
|     mem-estimate=16.00MB mem-reservation=512.00KB thread-reservation=0
|     tuple-ids=2 row-size=12B cardinality=373
|     in pipelines: 03(GETNEXT)
|
06:HASH JOIN [INNER JOIN, BROADCAST]
|  hash-table-id=03
|  hash predicates: ws_ship_mode_sk = sm_ship_mode_sk
|  fk/pk conjuncts: ws_ship_mode_sk = sm_ship_mode_sk
|  mem-estimate=0B mem-reservation=0B spill-buffer=64.00KB thread-reservation=0
|  tuple-ids=0,4 row-size=51B cardinality=71.94K(filtered from 71.94K)
|  in pipelines: 01(GETNEXT), 05(OPEN)
|
|--F18:PLAN FRAGMENT [RANDOM] hosts=2 instances=2
|  |  Per-Instance Resources: mem-estimate=4.89MB mem-reservation=4.88MB thread-reservation=1 runtime-filters-memory=1.00MB
|  JOIN BUILD
|  |  join-table-id=03 plan-id=04 cohort-id=01
|  |  build expressions: sm_ship_mode_sk
|  |  runtime filters: RF006[bloom] <- sm_ship_mode_sk, RF007[min_max] <- sm_ship_mode_sk
|  |  mem-estimate=3.88MB mem-reservation=3.88MB spill-buffer=64.00KB thread-reservation=0
|  |
|  23:EXCHANGE [BROADCAST]
|  |  mem-estimate=16.00KB mem-reservation=0B thread-reservation=0
|  |  tuple-ids=4 row-size=23B cardinality=2
|  |  in pipelines: 05(GETNEXT)
|  |
|  F01:PLAN FRAGMENT [RANDOM] hosts=1 instances=1
|  Per-Instance Resources: mem-estimate=16.10MB mem-reservation=16.00KB thread-reservation=1
|  05:SCAN HDFS [tpcds_parquet.ship_mode, RANDOM]
|     HDFS partitions=1/1 files=1 size=2.68KB
|     predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     stored statistics:
|       table: rows=20 size=2.68KB
|       columns: all
|     extrapolated-rows=disabled max-scan-range-rows=20
|     parquet statistics predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     parquet dictionary predicates: sm_carrier IN ('HARMSTORF', 'USPS')
|     mem-estimate=16.00MB mem-reservation=16.00KB thread-reservation=0
|     tuple-ids=4 row-size=23B cardinality=2
|     in pipelines: 05(GETNEXT)
|
01:SCAN HDFS [tpcds_parquet.web_sales, RANDOM]
   HDFS partitions=1/1 files=2 size=45.09MB
   runtime filters: RF007[min_max] -> ws_ship_mode_sk, RF005[min_max] -> ws_sold_date_sk, RF003[min_max] -> ws_sold_time_sk, RF001[min_max] -> ws_warehouse_sk, RF006[bloom] -> ws_ship_mode_sk, RF004[bloom] -> ws_sold_date_sk, RF002[bloom] -> ws_sold_time_sk, RF000[bloom] -> ws_warehouse_sk
   stored statistics:
     table: rows=719.38K size=45.09MB
     columns: all
   extrapolated-rows=disabled max-scan-range-rows=644.77K
   mem-estimate=32.00MB mem-reservation=8.00MB thread-reservation=0
   tuple-ids=0 row-size=28B cardinality=71.94K(filtered from 719.38K)
   in pipelines: 01(GETNEXT)
====
